{
   "classes": [
      "\\bQ[A-Z][A-Za-z0-9]*\\b",
      "\\bCS[A-Za-z0-9]+\\b",
      "\\b(and|and_eq|bad_cast|bad_typeid|bitand|bitor|compl|not|not_eq|or|or_eq|xor|xor_eq)\\b",
      "</?Q[^>]*>",
      "<.*>\\s*$"
   ],
   "comment-multi-start": "/\\*",
   "comment-multi-end": "\\*/",
   "comment-single": "//[^\n]*",
   "functions": [
      "\\bQ_[A-Z]+\\b",
      "\\b[A-Za-z0-9_]+(?=\\()"
   ],
   "ignore-case" : false,
   "keywords": [
        "\\b([#!][ \t]*[A-z]{2,}[\s]{1,}?([A-z]{2,}[\s]{1,}?)?)([\\(]?[^\s\\)]{1,}[\\)]?)?\\b",
        "\\b_[A-Z].*\\b",
        "\\b.*__.*\\b",
       "\\b(FALSE|NULL|SLOT|TRUE|alignas|alignof|asm|atomic_cancel|atomic_commit|atomic_noexcept|break|case|catch|cdecl|char|class|co_await|co_return|co_yield|concept|connect|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|disconnect|do|dynamic_cast|elif|else|emit|endif|enum|explicit|export|extern|false|final|for|foreach|forever|friend|goto|if|ifdef|ifndef|inline|module|namespace|new|noexcept|nullptr|operator|override|private|protected|public|qobject_cast|reflexpr|reinterpret_cast|requires|return|signals|sizeof|slots|static|static_assert|static_cast|struct|switch|template|this|throw|transaction_safe|transaction_safe_dynamic|true|try|type_info|typedef|typeid|typename|union|using|virtual|while)\\b"
   ],
   "types": [
      "\\b\\w+_type\\b",
      "\\b\\w+_t\\b",
      "\\b(?<!_)iterator\\b",
       "\\b(auto|bool|buint|char|char16_t|char32_t|char8_t|const_iterator|const_reference|const_reverse_iterator|double|float|gboolean|gchar|gid_t|gint|guint|guint16|guint32|guint64|guint8|int|long|mode_t|mutable|qint16|qint32|qint64|qint8|qintptr|qreal|quint16|quint32|quint64|quint8|quintptr|reference|register|reverse_iterator|short|signed|size_type|static|synchronized|thread_local|uchar|uid_t|ulong|unsigned|ushort|value_type|void|volatile)(?!(\\.|-|@|#|\\$))\\b"
   ],
   "constants": [
      "\\b[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?(ul)?(UL)?[lL]?[uU]?[fF]?",
      "\\b(0[xX][a-fA-F0-9]+)(ul)?(UL)?[lL]?[uU]?",
      "\\b(0[bB]([01]+))(ul)?(UL)?[lL]?[uU]?"
   ]
}
